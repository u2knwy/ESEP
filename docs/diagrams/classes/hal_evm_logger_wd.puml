@startuml

struct Event {
  EventType type
  int data
}

enum EventType {
  START_X_SHORT
  START_X_LONG
  STOP_X_SHORT
  ...
  LBA_X_BLOCKED
  MD_X_PAYLOAD
  ...
}

Event *- EventType

class EventManager {
  -int channelID
  -std::map<EventType, std::vector<IEventHandler&>> subscribers
  -ILogger logger
  +subscribe(Event event, IEventHandler& handler)
  +unregister(Event event, IEventHandler& handler)
  +sendEvent(Event event)
  -receiveLoop()
}

EventManager o- Logger

class Watchdog {
  -EventManager* eventManager
  +notify(Event event)
  -sendHeartbeatLoop()
}

Watchdog o-- EventManager
IEventHandler <|.. Watchdog

interface IEventHandler {
  #notify(Event event)
}

enum LogLevel {
  DEBUG
  INFO
  WARNING
  ERROR
}

interface ILogger {
  #setLogLevel(LogLevel level)
  #debug(std::string msg)
  #info(std::string msg)
  #warning(std::string msg)
  #error(std::string msg)
}

ILogger *- LogLevel

class Logger {
  -LogLevel level
  +setLogLevel(LogLevel level)
  +debug(std::string msg)
  +info(std::string msg)
  +warning(std::string msg)
  +error(std::string msg)
}
ILogger <|.. Logger

IEventHandler . Event

class HAL {
  -EventManager* eventManager
  -int evmConnectionId
  -ADC adc
  -int adcChannel
  -std::thread adcLoop
  -bool adcLoopRunning
  -int eventLoopChannel
  -std::thread eventLoop
  -bool eventLoopRunning
  +notify(Event event)
  +greenLampOn()
  +greenLampOff()
  +yellowLampOn()
  +yellowLampOff()
  +redLampOn()
  +redLampOff()
  +startLedOn()
  +startLedOff()
  +resetLedOn()
  +resetLedOff()
  +q1LedOn()
  +q1LedOff()
  +q2LedOn()
  +q2LedOff()
  +motorStop()
  +motorRightFast()
  +motorRightSlow()
  +openSwitch()
  +closeSwitch()
}

IEventHandler <|.. HAL
HAL o- EventManager

@enduml